/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvatarPerformance {
    #[serde(rename = "android", skip_serializing_if = "Option::is_none")]
    pub android: Option<String>,
    #[serde(rename = "android-sort", skip_serializing_if = "Option::is_none")]
    pub android_sort: Option<i32>,
    #[serde(rename = "ios", skip_serializing_if = "Option::is_none")]
    pub ios: Option<String>,
    #[serde(rename = "ios-sort", skip_serializing_if = "Option::is_none")]
    pub ios_sort: Option<i32>,
    #[serde(rename = "standalonewindows", skip_serializing_if = "Option::is_none")]
    pub standalonewindows: Option<String>,
    #[serde(
        rename = "standalonewindows-sort",
        skip_serializing_if = "Option::is_none"
    )]
    pub standalonewindows_sort: Option<i32>,
}

impl AvatarPerformance {
    pub fn new() -> AvatarPerformance {
        AvatarPerformance {
            android: None,
            android_sort: None,
            ios: None,
            ios_sort: None,
            standalonewindows: None,
            standalonewindows_sort: None,
        }
    }
}
