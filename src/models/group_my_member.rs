/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupMyMember {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "roleIds", skip_serializing_if = "Option::is_none")]
    pub role_ids: Option<Vec<String>>,
    #[serde(
        rename = "acceptedByDisplayName",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub accepted_by_display_name: Option<Option<String>>,
    #[serde(
        rename = "acceptedById",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub accepted_by_id: Option<Option<String>>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "managerNotes", skip_serializing_if = "Option::is_none")]
    pub manager_notes: Option<String>,
    #[serde(rename = "membershipStatus", skip_serializing_if = "Option::is_none")]
    pub membership_status: Option<String>,
    #[serde(
        rename = "isSubscribedToAnnouncements",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_subscribed_to_announcements: Option<bool>,
    #[serde(rename = "visibility", skip_serializing_if = "Option::is_none")]
    pub visibility: Option<String>,
    #[serde(rename = "isRepresenting", skip_serializing_if = "Option::is_none")]
    pub is_representing: Option<bool>,
    #[serde(rename = "joinedAt", skip_serializing_if = "Option::is_none")]
    pub joined_at: Option<String>,
    #[serde(
        rename = "bannedAt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub banned_at: Option<Option<String>>,
    #[serde(rename = "has2FA", skip_serializing_if = "Option::is_none")]
    pub has2_fa: Option<bool>,
    #[serde(
        rename = "hasJoinedFromPurchase",
        skip_serializing_if = "Option::is_none"
    )]
    pub has_joined_from_purchase: Option<bool>,
    #[serde(
        rename = "lastPostReadAt",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_post_read_at: Option<Option<String>>,
    #[serde(rename = "mRoleIds", skip_serializing_if = "Option::is_none")]
    pub m_role_ids: Option<Vec<String>>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Vec<Permissions>>,
}

impl GroupMyMember {
    pub fn new() -> GroupMyMember {
        GroupMyMember {
            id: None,
            group_id: None,
            user_id: None,
            role_ids: None,
            accepted_by_display_name: None,
            accepted_by_id: None,
            created_at: None,
            manager_notes: None,
            membership_status: None,
            is_subscribed_to_announcements: None,
            visibility: None,
            is_representing: None,
            joined_at: None,
            banned_at: None,
            has2_fa: None,
            has_joined_from_purchase: None,
            last_post_read_at: None,
            m_role_ids: None,
            permissions: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Permissions {
    #[serde(rename = "\\*")]
    group_all,
    #[serde(rename = "group-announcement-manage")]
    group_announcement_manage,
    #[serde(rename = "group-audit-view")]
    group_audit_view,
    #[serde(rename = "group-bans-manage")]
    group_bans_manage,
    #[serde(rename = "group-data-manage")]
    group_data_manage,
    #[serde(rename = "group-default-role-manage")]
    group_default_role_manage,
    #[serde(rename = "group-galleries-manage")]
    group_galleries_manage,
    #[serde(rename = "group-instance-age-gated-create")]
    group_instance_age_gated_create,
    #[serde(rename = "group-instance-join")]
    group_instance_join,
    #[serde(rename = "group-instance-manage")]
    group_instance_manage,
    #[serde(rename = "group-instance-moderate")]
    group_instance_moderate,
    #[serde(rename = "group-instance-open-create")]
    group_instance_open_create,
    #[serde(rename = "group-instance-plus-create")]
    group_instance_plus_create,
    #[serde(rename = "group-instance-plus-portal")]
    group_instance_plus_portal,
    #[serde(rename = "group-instance-plus-portal-unlocked")]
    group_instance_plus_portal_unlocked,
    #[serde(rename = "group-instance-public-create")]
    group_instance_public_create,
    #[serde(rename = "group-instance-queue-priority")]
    group_instance_queue_priority,
    #[serde(rename = "group-instance-restricted-create")]
    group_instance_restricted_create,
    #[serde(rename = "group-invites-manage")]
    group_invites_manage,
    #[serde(rename = "group-members-manage")]
    group_members_manage,
    #[serde(rename = "group-members-remove")]
    group_members_remove,
    #[serde(rename = "group-members-viewall")]
    group_members_viewall,
    #[serde(rename = "group-roles-assign")]
    group_roles_assign,
    #[serde(rename = "group-roles-manage")]
    group_roles_manage,
}

impl Default for Permissions {
    fn default() -> Permissions {
        Self::group_all
    }
}
