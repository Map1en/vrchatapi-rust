/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductListing {
    #[serde(rename = "active")]
    pub active: bool,
    #[serde(rename = "archived")]
    pub archived: bool,
    #[serde(rename = "buyerRefundable")]
    pub buyer_refundable: bool,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "displayName")]
    pub display_name: String,
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    #[serde(rename = "durationType", skip_serializing_if = "Option::is_none")]
    pub duration_type: Option<String>,
    #[serde(rename = "groupIcon")]
    pub group_icon: String,
    #[serde(rename = "groupId")]
    pub group_id: String,
    #[serde(rename = "groupName")]
    pub group_name: String,
    #[serde(rename = "hydratedProducts", skip_serializing_if = "Option::is_none")]
    pub hydrated_products: Option<Vec<models::Product>>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "imageId")]
    pub image_id: String,
    #[serde(rename = "instant")]
    pub instant: bool,
    #[serde(rename = "listingType")]
    pub listing_type: models::ProductListingType,
    #[serde(rename = "listingVariants")]
    pub listing_variants: Vec<models::ProductListingVariant>,
    #[serde(rename = "permanent")]
    pub permanent: bool,
    #[serde(rename = "priceTokens")]
    pub price_tokens: i32,
    #[serde(rename = "productIds")]
    pub product_ids: Vec<String>,
    #[serde(rename = "productType")]
    pub product_type: models::ProductType,
    #[serde(rename = "products")]
    pub products: Vec<serde_json::Value>,
    #[serde(rename = "quantifiable", skip_serializing_if = "Option::is_none")]
    pub quantifiable: Option<bool>,
    #[serde(rename = "recurrable")]
    pub recurrable: bool,
    #[serde(rename = "refundable")]
    pub refundable: bool,
    #[serde(rename = "sellerDisplayName")]
    pub seller_display_name: String,
    #[serde(rename = "sellerId")]
    pub seller_id: String,
    #[serde(rename = "stackable")]
    pub stackable: bool,
    #[serde(rename = "storeIds")]
    pub store_ids: Vec<String>,
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
    #[serde(rename = "updated", deserialize_with = "Option::deserialize")]
    pub updated: Option<String>,
}

impl ProductListing {
    pub fn new(
        active: bool,
        archived: bool,
        buyer_refundable: bool,
        created: String,
        description: String,
        display_name: String,
        group_icon: String,
        group_id: String,
        group_name: String,
        id: String,
        image_id: String,
        instant: bool,
        listing_type: models::ProductListingType,
        listing_variants: Vec<models::ProductListingVariant>,
        permanent: bool,
        price_tokens: i32,
        product_ids: Vec<String>,
        product_type: models::ProductType,
        products: Vec<serde_json::Value>,
        recurrable: bool,
        refundable: bool,
        seller_display_name: String,
        seller_id: String,
        stackable: bool,
        store_ids: Vec<String>,
        tags: Vec<String>,
        updated: Option<String>,
    ) -> ProductListing {
        ProductListing {
            active,
            archived,
            buyer_refundable,
            created,
            description,
            display_name,
            duration: None,
            duration_type: None,
            group_icon,
            group_id,
            group_name,
            hydrated_products: None,
            id,
            image_id,
            instant,
            listing_type,
            listing_variants,
            permanent,
            price_tokens,
            product_ids,
            product_type,
            products,
            quantifiable: None,
            recurrable,
            refundable,
            seller_display_name,
            seller_id,
            stackable,
            store_ids,
            tags,
            updated,
        }
    }
}
