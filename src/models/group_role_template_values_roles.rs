/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupRoleTemplateValuesRoles {
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "basePermissions", skip_serializing_if = "Option::is_none")]
    pub base_permissions: Option<Vec<models::GroupPermissions>>,
    #[serde(rename = "isAddedOnJoin", skip_serializing_if = "Option::is_none")]
    pub is_added_on_join: Option<bool>,
}

impl GroupRoleTemplateValuesRoles {
    pub fn new() -> GroupRoleTemplateValuesRoles {
        GroupRoleTemplateValuesRoles {
            description: None,
            name: None,
            base_permissions: None,
            is_added_on_join: None,
        }
    }
}
