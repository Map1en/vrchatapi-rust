/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApiConfigReportOptions : Options for reporting content
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiConfigReportOptions {
    #[serde(rename = "avatar", skip_serializing_if = "Option::is_none")]
    pub avatar: Option<models::ApiConfigReportOptionsAvatar>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<models::ApiConfigReportOptionsGroup>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<models::ApiConfigReportOptionsUser>,
    #[serde(rename = "world", skip_serializing_if = "Option::is_none")]
    pub world: Option<models::ApiConfigReportOptionsWorld>,
}

impl ApiConfigReportOptions {
    /// Options for reporting content
    pub fn new() -> ApiConfigReportOptions {
        ApiConfigReportOptions {
            avatar: None,
            group: None,
            user: None,
            world: None,
        }
    }
}
