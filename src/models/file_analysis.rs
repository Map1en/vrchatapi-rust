/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileAnalysis {
    #[serde(rename = "avatarStats")]
    pub avatar_stats: models::FileAnalysisAvatarStats,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "fileSize")]
    pub file_size: i32,
    #[serde(rename = "performanceRating", skip_serializing_if = "Option::is_none")]
    pub performance_rating: Option<String>,
    #[serde(rename = "success")]
    pub success: bool,
    #[serde(rename = "uncompressedSize")]
    pub uncompressed_size: i32,
}

impl FileAnalysis {
    pub fn new(
        avatar_stats: models::FileAnalysisAvatarStats,
        file_size: i32,
        success: bool,
        uncompressed_size: i32,
    ) -> FileAnalysis {
        FileAnalysis {
            avatar_stats,
            created_at: None,
            file_size,
            performance_rating: None,
            success,
            uncompressed_size,
        }
    }
}
