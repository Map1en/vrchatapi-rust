/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiConfigAccessLogsUrls {
    #[serde(rename = "Default", skip_serializing_if = "Option::is_none")]
    pub default: Option<String>,
    #[serde(rename = "Pico", skip_serializing_if = "Option::is_none")]
    pub pico: Option<String>,
    #[serde(rename = "Quest", skip_serializing_if = "Option::is_none")]
    pub quest: Option<String>,
    #[serde(rename = "XRElite", skip_serializing_if = "Option::is_none")]
    pub xr_elite: Option<String>,
}

impl ApiConfigAccessLogsUrls {
    pub fn new() -> ApiConfigAccessLogsUrls {
        ApiConfigAccessLogsUrls {
            default: None,
            pico: None,
            quest: None,
            xr_elite: None,
        }
    }
}
