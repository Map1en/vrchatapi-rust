/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiConfigReportOptionsUser {
    #[serde(rename = "behavior", skip_serializing_if = "Option::is_none")]
    pub behavior: Option<Vec<String>>,
    #[serde(rename = "chat", skip_serializing_if = "Option::is_none")]
    pub chat: Option<Vec<String>>,
    #[serde(rename = "emoji", skip_serializing_if = "Option::is_none")]
    pub emoji: Option<Vec<String>>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<Vec<String>>,
    #[serde(rename = "sticker", skip_serializing_if = "Option::is_none")]
    pub sticker: Option<Vec<String>>,
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<Vec<String>>,
}

impl ApiConfigReportOptionsUser {
    pub fn new() -> ApiConfigReportOptionsUser {
        ApiConfigReportOptionsUser {
            behavior: None,
            chat: None,
            emoji: None,
            image: None,
            sticker: None,
            text: None,
        }
    }
}
