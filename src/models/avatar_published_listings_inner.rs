/*
 * VRChat API Documentation
 *
 *
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvatarPublishedListingsInner {
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    #[serde(rename = "imageId", skip_serializing_if = "Option::is_none")]
    pub image_id: Option<String>,
    #[serde(rename = "listingId", skip_serializing_if = "Option::is_none")]
    pub listing_id: Option<String>,
    #[serde(rename = "listingType", skip_serializing_if = "Option::is_none")]
    pub listing_type: Option<String>,
    #[serde(rename = "priceTokens", skip_serializing_if = "Option::is_none")]
    pub price_tokens: Option<i32>,
}

impl AvatarPublishedListingsInner {
    pub fn new() -> AvatarPublishedListingsInner {
        AvatarPublishedListingsInner {
            description: None,
            display_name: None,
            image_id: None,
            listing_id: None,
            listing_type: None,
            price_tokens: None,
        }
    }
}
